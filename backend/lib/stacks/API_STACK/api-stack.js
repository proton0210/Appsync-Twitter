"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiStack = void 0;
const NotifyRetweeted_1 = require("./Constructs/NotifyRetweeted");
const HashTagConstruct_1 = require("./Constructs/HashTagConstruct");
const GetFollowingConstruct_1 = require("./Constructs/GetFollowingConstruct");
const UnfollowConstruct_1 = require("./Constructs/UnfollowConstruct");
const NestedFollowingProfie_1 = require("./Constructs/NestedFollowingProfie");
const NestedInReplyToUsers_1 = require("./Constructs/NestedInReplyToUsers");
const NestedInReplToTweet_1 = require("./Constructs/NestedInReplToTweet");
const NestedReplyProfile_1 = require("./Constructs/NestedReplyProfile");
const ReplyConstruct_1 = require("./Constructs/ReplyConstruct");
const NestedTweetRetweeted_1 = require("./Constructs/NestedTweetRetweeted");
const NestedRetweetOf_1 = require("./Constructs/NestedRetweetOf");
const Nested_RetweetProfile_1 = require("./Constructs/Nested_RetweetProfile");
const RetweetConstruct_1 = require("./Constructs/RetweetConstruct");
const Nested_OtherProfileTweet_1 = require("./Constructs/Nested_OtherProfileTweet");
const Nested_MyProfileTweet_1 = require("./Constructs/Nested_MyProfileTweet");
const GetLikesConstruct_1 = require("./Constructs/GetLikesConstruct");
const UnlikeConstruct_1 = require("./Constructs/UnlikeConstruct");
const NestedLiked_1 = require("./Constructs/NestedLiked");
const LikeContruct_1 = require("./Constructs/LikeContruct");
const NestedUnhydratedTweets_1 = require("./Constructs/NestedUnhydratedTweets");
const GetMyTimeLine_1 = require("./Constructs/GetMyTimeLine");
const TweetConstruct_1 = require("./Constructs/TweetConstruct");
const GetMyProfileConstruct_1 = require("./Constructs/GetMyProfileConstruct");
const cdk = require("aws-cdk-lib");
const appsync = require("@aws-cdk/aws-appsync-alpha");
const path = require("path");
const EditMyProfileConstruct_1 = require("./Constructs/EditMyProfileConstruct");
const GetImageUploadUrlConstruct_1 = require("./Constructs/GetImageUploadUrlConstruct");
const GetTweetsConstuct_1 = require("./Constructs/GetTweetsConstuct");
const NestedProfile_Type_Tweet_1 = require("./Constructs/NestedProfile_Type_Tweet");
const UnRetweetConstruct_1 = require("./Constructs/UnRetweetConstruct");
const NestedReplyRetweeted_1 = require("./Constructs/NestedReplyRetweeted");
const NestedReplyLike_1 = require("./Constructs/NestedReplyLike");
const FollowConstruct_1 = require("./Constructs/FollowConstruct");
const NestedFollowedByProfile_1 = require("./Constructs/NestedFollowedByProfile");
const GetProfileConstruct_1 = require("./Constructs/GetProfileConstruct");
const GetFollowersConstruct_1 = require("./Constructs/GetFollowersConstruct");
const SearchConstruct_1 = require("./Constructs/SearchConstruct");
const onNotifiedConstrcut_1 = require("./Constructs/onNotifiedConstrcut");
const NotifyLiked_1 = require("./Constructs/NotifyLiked");
const NotifyMention_1 = require("./Constructs/NotifyMention");
const NotifyReplied_1 = require("./Constructs/NotifyReplied");
const SendDirectMessage_1 = require("./Constructs/SendDirectMessage");
const NestedOtherUserConversationConstruct_1 = require("./Constructs/NestedOtherUserConversationConstruct");
const ListConversations_1 = require("./Constructs/ListConversations");
const GetDirectMessages_1 = require("./Constructs/GetDirectMessages");
const NestedMessageFrom_1 = require("./Constructs/NestedMessageFrom");
class ApiStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.api = new appsync.GraphqlApi(this, 'Api', {
            name: 'twitter-api',
            schema: appsync.Schema.fromAsset(path.join(__dirname, 'Schema/schema.api.graphql')),
            authorizationConfig: {
                defaultAuthorization: {
                    authorizationType: appsync.AuthorizationType.USER_POOL,
                    userPoolConfig: {
                        userPool: props.userPool
                    }
                },
                // additional iam auth
                additionalAuthorizationModes: [
                    {
                        authorizationType: appsync.AuthorizationType.IAM
                    }
                ]
            }
        });
        this.props = props;
        this.queries();
        this.mutations();
        this.nestedResolvers();
        this.subscriptions();
        //output API URL
        new cdk.CfnOutput(this, 'GraphQLAPIURL', {
            value: this.api.graphqlUrl
        });
    }
    queries() {
        new GetMyProfileConstruct_1.GetMyProfileResolver(this, 'QueryGetMyProfileResolver', this.api, this.props.usersTable).resolver;
        const getImageUploadUrl = new GetImageUploadUrlConstruct_1.GetImageUploadURL(this, 'QueryGetImageUploadUrl', this.api);
        getImageUploadUrl.resolver;
        this.imageUploadFunction = getImageUploadUrl.getImageUploadURLfunction;
        new GetTweetsConstuct_1.GetTweetsResolver(this, 'QueryGetTweetsResolver', this.api, this.props.tweetsTable).resolver;
        new GetMyTimeLine_1.GetMyTimeLine(this, 'QueryGetMyTimeLineResolver', this.api, this.props.timelinesTable).resolver;
        new GetLikesConstruct_1.GetLikes(this, 'QueryGetLikesResolver', this.api, this.props.likesTable)
            .resolver;
        new GetProfileConstruct_1.GetProfile(this, 'QueryGetProfile', this.api, this.props.usersTable)
            .resolver;
        // This is pipeline resolver example
        new GetFollowersConstruct_1.GetFollowers(this, 'QueryGetFollowers', this.api, this.props.relationshipsTable, this.props.usersTable).resolver;
        new GetFollowingConstruct_1.GetFollowing(this, 'QueryGetFollowing', this.api, this.props.relationshipsTable, this.props.usersTable).resolver;
        new SearchConstruct_1.Search(this, 'QuerySearch', this.api).resolver;
        new HashTagConstruct_1.Hashtag(this, 'QueryHashtag', this.api).resolver;
        new ListConversations_1.ListConversations(this, 'QueryListConversations', this.api, this.props.conversationsTable).resolver;
        new GetDirectMessages_1.GetDirectMessages(this, 'QueryGetDirectMessages', this.api, this.props.directMessagesTable).resolver;
    }
    nestedResolvers() {
        new NestedProfile_Type_Tweet_1.NestedProfileTweet(this, 'NestedProfileTweet', this.api, this.props.usersTable).resolver;
        new NestedUnhydratedTweets_1.NestedUnhydratedTweetsPage(this, 'NestedUnhydratedTweetsPage', this.api, this.props.tweetsTable).resolver;
        new NestedLiked_1.NestedLiked(this, 'NestedLiked', this.api, this.props.likesTable)
            .resolver;
        new Nested_MyProfileTweet_1.NestedMyProfile(this, 'NestedMyProfile', this.api, this.props.tweetsTable).resolver;
        new Nested_OtherProfileTweet_1.NestedOtherProfile(this, 'NestedOtherProfile', this.api, this.props.tweetsTable).resolver;
        new Nested_RetweetProfile_1.NestedRetweetProfile(this, 'NestedRetweetProfile', this.api, this.props.usersTable).resolver;
        new NestedRetweetOf_1.NestedRetweetOf(this, 'NestedRetweetOf', this.api, this.props.tweetsTable).resolver;
        new NestedTweetRetweeted_1.NestedTweetRetweeted(this, 'NestedTweetRetweeted', this.api, this.props.retweetsTable).resolver;
        new NestedReplyProfile_1.NestedReplyProfile(this, 'NestedReplyProfile', this.api, this.props.usersTable).resolver;
        new NestedInReplToTweet_1.NestedInReplyToTweet(this, 'NestedInReplyToTweet', this.api, this.props.tweetsTable).resolver;
        new NestedInReplyToUsers_1.NestedInReplyToUsers(this, 'NestedInReplyToUsers', this.api, this.props.usersTable).resolver;
        new NestedReplyRetweeted_1.NestedReplyRetweeted(this, 'NestedReplyRetweeted', this.api, this.props.retweetsTable).resolver;
        new NestedReplyLike_1.NestedReplyLike(this, 'NestedReplyLike', this.api, this.props.likesTable).resolver;
        new NestedFollowingProfie_1.NestedFollowingOtherProfile(this, 'NestedFollowingOtherProfile', this.api, this.props.relationshipsTable).resolver;
        new NestedFollowedByProfile_1.NestedFollowedByOtherProfile(this, 'NestedFollowedByOtherProfile', this.api, this.props.relationshipsTable).resolver;
        new NestedOtherUserConversationConstruct_1.OtherUserConversation(this, 'OtherUserConversation', this.api, this.props.usersTable).resolver;
        new NestedMessageFrom_1.MessageFrom(this, 'MessageFrom', this.api, this.props.usersTable)
            .resolver;
    }
    // id string should be unique for each construct
    mutations() {
        new EditMyProfileConstruct_1.EditMyProfile(this, 'EditMyProfileResolver', this.api, this.props.usersTable).resolver;
        //Tweet Mutation
        const tweetMutation = new TweetConstruct_1.Tweet(this, 'TweetMutation', this.api);
        tweetMutation.resolver;
        this.props.usersTable.grantFullAccess(tweetMutation.Tweetfunction);
        this.props.tweetsTable.grantFullAccess(tweetMutation.Tweetfunction);
        this.props.timelinesTable.grantFullAccess(tweetMutation.Tweetfunction);
        //RetweetMutation
        const retweetMutation = new RetweetConstruct_1.Retweet(this, 'RetweetMutation', this.api);
        retweetMutation.resolver;
        this.props.usersTable.grantFullAccess(retweetMutation.Retweetfunction);
        this.props.tweetsTable.grantFullAccess(retweetMutation.Retweetfunction);
        this.props.timelinesTable.grantFullAccess(retweetMutation.Retweetfunction);
        this.props.retweetsTable.grantFullAccess(retweetMutation.Retweetfunction);
        //UnRetweetMutation
        const unretweetMutation = new UnRetweetConstruct_1.UnRetweet(this, 'UnRetweetMutation', this.api);
        unretweetMutation.resolver;
        this.props.usersTable.grantFullAccess(unretweetMutation.UnRetweetFunction);
        this.props.tweetsTable.grantFullAccess(unretweetMutation.UnRetweetFunction);
        this.props.timelinesTable.grantFullAccess(unretweetMutation.UnRetweetFunction);
        this.props.retweetsTable.grantFullAccess(unretweetMutation.UnRetweetFunction);
        //ReplyMutation
        const replyMutation = new ReplyConstruct_1.Reply(this, 'ReplyMutation', this.api);
        replyMutation.resolver;
        this.props.usersTable.grantFullAccess(replyMutation.Replyfunction);
        this.props.tweetsTable.grantFullAccess(replyMutation.Replyfunction);
        this.props.timelinesTable.grantFullAccess(replyMutation.Replyfunction);
        //Like Mutation
        // Manually have to add access in the service role from console for tweets and users table
        const LikeMutation = new LikeContruct_1.Like(this, 'LikeMutation', this.api, this.props.likesTable);
        LikeMutation.resolver;
        //Unlike Mutation
        // Manually have to add access in the service role from console for tweets and users table
        const UnlikeMutation = new UnlikeConstruct_1.Unlike(this, 'UnlikeMutation', this.api, this.props.likesTable);
        UnlikeMutation.resolver;
        //Follow Mutation
        // Manually add access in the service role from console for users table
        const FollowMutation = new FollowConstruct_1.Follow(this, 'FollowMutation', this.api, this.props.relationshipsTable).resolver;
        //Unfollow Mutation
        // Manually add access in the service role from console for users table
        const UnfollowMutation = new UnfollowConstruct_1.UnFollow(this, 'UnfollowMutation', this.api, this.props.relationshipsTable).resolver;
        new NotifyRetweeted_1.NotifyRetweeted(this, 'NotifyRetweeted', this.api, this.props.notificationsTable);
        new NotifyLiked_1.NotifyLiked(this, 'NotifyLiked', this.api, this.props.notificationsTable);
        new NotifyMention_1.NotifyMention(this, 'NotifyMention', this.api, this.props.notificationsTable);
        new NotifyReplied_1.NotifyReplied(this, 'NotifyReplied', this.api, this.props.notificationsTable);
        const sendDirectMessageMutation = new SendDirectMessage_1.SendDirectMessage(this, 'SendDirectMessageMutation', this.api);
        sendDirectMessageMutation.resolver;
        this.props.conversationsTable.grantFullAccess(sendDirectMessageMutation.SendDirectMessagefunction);
        this.props.directMessagesTable.grantFullAccess(sendDirectMessageMutation.SendDirectMessagefunction);
    }
    subscriptions() {
        new onNotifiedConstrcut_1.OnNotified(this, 'OnNotifiedSubscription', this.api);
    }
}
exports.ApiStack = ApiStack;
//# sourceMappingURL=data:application/json;base64,