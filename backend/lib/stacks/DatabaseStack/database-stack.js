"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataBaseStack = void 0;
const NotificationsTable_1 = require("./Constructs/NotificationsTable");
const RelationshipsTable_1 = require("./Constructs/RelationshipsTable");
const RetweetsTable_1 = require("./Constructs/RetweetsTable");
const LikesTable_1 = require("./Constructs/LikesTable");
const TweetsTable_1 = require("./Constructs/TweetsTable");
const cdk = require("aws-cdk-lib");
const eventsources = require("aws-cdk-lib/aws-lambda-event-sources");
const UsersTable_1 = require("./Constructs/UsersTable");
const TimelinesTable_1 = require("./Constructs/TimelinesTable");
class DataBaseStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.props = props;
        this.initialize();
    }
    initialize() {
        this.initializeUserTableWithAccess();
        this.initializeTweetsTableWithAccess();
        this.initializeTimeLinesTableWithAccess();
        this.initializeLikesTableWithAccess();
        this.initializeRetweetTableWithAccess();
        this.initializeRelationshipsTableWithAccess();
        this.initializeNotificationTableWithAccess();
    }
    initializeUserTableWithAccess() {
        this.usersTable = new UsersTable_1.UsersTable(this, 'UsersTable');
        this.usersTable.table.grantFullAccess(this.props.postConfirmationHook);
        this.props.syncUserstoAlgolia.addEventSource(new eventsources.DynamoEventSource(this.usersTable.table, {
            startingPosition: cdk.aws_lambda.StartingPosition.LATEST
        }));
    }
    initializeTweetsTableWithAccess() {
        this.tweetsTable = new TweetsTable_1.TweetsTable(this, 'TweetsTable');
        this.tweetsTable.table.grantFullAccess(this.props.distributeTweetWithFollowers);
        this.props.distributedTweet.addEventSource(new eventsources.DynamoEventSource(this.tweetsTable.table, {
            startingPosition: cdk.aws_lambda.StartingPosition.LATEST
        }));
        this.props.syncTweetsToAlgolia.addEventSource(new eventsources.DynamoEventSource(this.tweetsTable.table, {
            startingPosition: cdk.aws_lambda.StartingPosition.LATEST
        }));
        this.props.Notify.addEventSource(new eventsources.DynamoEventSource(this.tweetsTable.table, {
            startingPosition: cdk.aws_lambda.StartingPosition.LATEST
        }));
    }
    initializeTimeLinesTableWithAccess() {
        this.timelinesTable = new TimelinesTable_1.TimelinesTable(this, 'TimelinesTable');
        this.timelinesTable.table.grantFullAccess(this.props.distributedTweet);
        this.timelinesTable.table.grantFullAccess(this.props.distributeTweetWithFollowers);
    }
    initializeLikesTableWithAccess() {
        this.likesTable = new LikesTable_1.LikesTable(this, 'LikesTable');
    }
    initializeRetweetTableWithAccess() {
        this.retweetTable = new RetweetsTable_1.RetweetsTable(this, 'RetweetsTable');
    }
    initializeRelationshipsTableWithAccess() {
        this.relationShipsTable = new RelationshipsTable_1.RelationshipsTable(this, 'RelationshipsTable');
        this.relationShipsTable.table.grantFullAccess(this.props.distributedTweet);
        this.relationShipsTable.table.grantFullAccess(this.props.distributeTweetWithFollowers);
        this.props.distributeTweetWithFollowers.addEventSource(new eventsources.DynamoEventSource(this.relationShipsTable.table, {
            startingPosition: cdk.aws_lambda.StartingPosition.LATEST
        }));
    }
    initializeNotificationTableWithAccess() {
        this.notificationsTable = new NotificationsTable_1.NotificationTable(this, 'NotificationTable');
    }
}
exports.DataBaseStack = DataBaseStack;
//# sourceMappingURL=data:application/json;base64,