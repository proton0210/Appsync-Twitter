"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataBaseStack = void 0;
const RelationshipsTable_1 = require("./Constructs/RelationshipsTable");
const RetweetsTable_1 = require("./Constructs/RetweetsTable");
const LikesTable_1 = require("./Constructs/LikesTable");
const TweetsTable_1 = require("./Constructs/TweetsTable");
const cdk = require("aws-cdk-lib");
const eventsources = require("aws-cdk-lib/aws-lambda-event-sources");
const UsersTable_1 = require("./Constructs/UsersTable");
const TimelinesTable_1 = require("./Constructs/TimelinesTable");
class DataBaseStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.props = props;
        this.initialize();
    }
    initialize() {
        this.initializeUserTableWithAccess();
        this.initializeTweetsTableWithAccess();
        this.initializeTimeLinesTableWithAccess();
        this.initializeLikesTableWithAccess();
        this.initializeRetweetTableWithAccess();
        this.initializeRelationshipsTableWithAccess();
    }
    initializeUserTableWithAccess() {
        this.usersTable = new UsersTable_1.UsersTable(this, 'UsersTable');
        this.usersTable.table.grantFullAccess(this.props.postConfirmationHook);
        this.props.syncUserstoAlgolia.addEventSource(new eventsources.DynamoEventSource(this.usersTable.table, {
            startingPosition: cdk.aws_lambda.StartingPosition.LATEST
        }));
    }
    initializeTweetsTableWithAccess() {
        this.tweetsTable = new TweetsTable_1.TweetsTable(this, 'TweetsTable');
        this.tweetsTable.table.grantFullAccess(this.props.distributeTweetWithFollowers);
        this.props.distributedTweet.addEventSource(new eventsources.DynamoEventSource(this.tweetsTable.table, {
            startingPosition: cdk.aws_lambda.StartingPosition.LATEST
        }));
        this.props.syncTweetsToAlgolia.addEventSource(new eventsources.DynamoEventSource(this.tweetsTable.table, {
            startingPosition: cdk.aws_lambda.StartingPosition.LATEST
        }));
    }
    initializeTimeLinesTableWithAccess() {
        this.timelinesTable = new TimelinesTable_1.TimelinesTable(this, 'TimelinesTable');
        this.timelinesTable.table.grantFullAccess(this.props.distributedTweet);
        this.timelinesTable.table.grantFullAccess(this.props.distributeTweetWithFollowers);
    }
    initializeLikesTableWithAccess() {
        this.likesTable = new LikesTable_1.LikesTable(this, 'LikesTable');
    }
    initializeRetweetTableWithAccess() {
        this.retweetTable = new RetweetsTable_1.RetweetsTable(this, 'RetweetsTable');
    }
    initializeRelationshipsTableWithAccess() {
        this.relationShipsTable = new RelationshipsTable_1.RelationshipsTable(this, 'RelationshipsTable');
        this.relationShipsTable.table.grantFullAccess(this.props.distributedTweet);
        this.relationShipsTable.table.grantFullAccess(this.props.distributeTweetWithFollowers);
        this.props.distributeTweetWithFollowers.addEventSource(new eventsources.DynamoEventSource(this.relationShipsTable.table, {
            startingPosition: cdk.aws_lambda.StartingPosition.LATEST
        }));
    }
}
exports.DataBaseStack = DataBaseStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2Utc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRhYmFzZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3RUFBcUU7QUFDckUsOERBQTJEO0FBQzNELHdEQUFxRDtBQUNyRCwwREFBdUQ7QUFFdkQsbUNBQW1DO0FBQ25DLHFFQUFxRTtBQUVyRSx3REFBcUQ7QUFDckQsZ0VBQTZEO0FBRTdELE1BQWEsYUFBYyxTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBUzFDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBeUI7UUFDakUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxVQUFVO1FBQ1IsSUFBSSxDQUFDLDZCQUE2QixFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLCtCQUErQixFQUFFLENBQUM7UUFDdkMsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLDhCQUE4QixFQUFFLENBQUM7UUFDdEMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLENBQUM7UUFDeEMsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLENBQUM7SUFDaEQsQ0FBQztJQUVELDZCQUE2QjtRQUMzQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksdUJBQVUsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FDMUMsSUFBSSxZQUFZLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUU7WUFDeEQsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNO1NBQ3pELENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELCtCQUErQjtRQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUkseUJBQVcsQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUN4QyxDQUFDO1FBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQ3hDLElBQUksWUFBWSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFO1lBQ3pELGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsTUFBTTtTQUN6RCxDQUFDLENBQ0gsQ0FBQztRQUVGLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsY0FBYyxDQUMzQyxJQUFJLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRTtZQUN6RCxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLE1BQU07U0FDekQsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsa0NBQWtDO1FBQ2hDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSwrQkFBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUN2QyxJQUFJLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUN4QyxDQUFDO0lBQ0osQ0FBQztJQUVELDhCQUE4QjtRQUM1QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksdUJBQVUsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUNELGdDQUFnQztRQUM5QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELHNDQUFzQztRQUNwQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSx1Q0FBa0IsQ0FDOUMsSUFBSSxFQUNKLG9CQUFvQixDQUNyQixDQUFDO1FBQ0YsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUMzQyxJQUFJLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUN4QyxDQUFDO1FBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxjQUFjLENBQ3BELElBQUksWUFBWSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUU7WUFDaEUsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNO1NBQ3pELENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBbEZELHNDQWtGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlbGF0aW9uc2hpcHNUYWJsZSB9IGZyb20gJy4vQ29uc3RydWN0cy9SZWxhdGlvbnNoaXBzVGFibGUnO1xuaW1wb3J0IHsgUmV0d2VldHNUYWJsZSB9IGZyb20gJy4vQ29uc3RydWN0cy9SZXR3ZWV0c1RhYmxlJztcbmltcG9ydCB7IExpa2VzVGFibGUgfSBmcm9tICcuL0NvbnN0cnVjdHMvTGlrZXNUYWJsZSc7XG5pbXBvcnQgeyBUd2VldHNUYWJsZSB9IGZyb20gJy4vQ29uc3RydWN0cy9Ud2VldHNUYWJsZSc7XG5pbXBvcnQgeyBEYXRhQmFzZVN0YWNrUHJvcHMgfSBmcm9tICcuLy4uLy4uLy4uL0ludGVyZmFjZXMvZGF0YWJhc2UtaW50ZXJmYWNlJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBldmVudHNvdXJjZXMgZnJvbSAnYXdzLWNkay1saWIvYXdzLWxhbWJkYS1ldmVudC1zb3VyY2VzJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgVXNlcnNUYWJsZSB9IGZyb20gJy4vQ29uc3RydWN0cy9Vc2Vyc1RhYmxlJztcbmltcG9ydCB7IFRpbWVsaW5lc1RhYmxlIH0gZnJvbSAnLi9Db25zdHJ1Y3RzL1RpbWVsaW5lc1RhYmxlJztcblxuZXhwb3J0IGNsYXNzIERhdGFCYXNlU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICBwdWJsaWMgdXNlcnNUYWJsZTogVXNlcnNUYWJsZTtcbiAgcHVibGljIHR3ZWV0c1RhYmxlOiBUd2VldHNUYWJsZTtcbiAgcHVibGljIHRpbWVsaW5lc1RhYmxlOiBUaW1lbGluZXNUYWJsZTtcbiAgcHVibGljIGxpa2VzVGFibGU6IExpa2VzVGFibGU7XG4gIHB1YmxpYyByZXR3ZWV0VGFibGU6IFJldHdlZXRzVGFibGU7XG4gIHB1YmxpYyByZWxhdGlvblNoaXBzVGFibGU6IFJlbGF0aW9uc2hpcHNUYWJsZTtcbiAgcHVibGljIHByb3BzOiBEYXRhQmFzZVN0YWNrUHJvcHM7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IERhdGFCYXNlU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy5pbml0aWFsaXplVXNlclRhYmxlV2l0aEFjY2VzcygpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZVR3ZWV0c1RhYmxlV2l0aEFjY2VzcygpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZVRpbWVMaW5lc1RhYmxlV2l0aEFjY2VzcygpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZUxpa2VzVGFibGVXaXRoQWNjZXNzKCk7XG4gICAgdGhpcy5pbml0aWFsaXplUmV0d2VldFRhYmxlV2l0aEFjY2VzcygpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZVJlbGF0aW9uc2hpcHNUYWJsZVdpdGhBY2Nlc3MoKTtcbiAgfVxuXG4gIGluaXRpYWxpemVVc2VyVGFibGVXaXRoQWNjZXNzKCkge1xuICAgIHRoaXMudXNlcnNUYWJsZSA9IG5ldyBVc2Vyc1RhYmxlKHRoaXMsICdVc2Vyc1RhYmxlJyk7XG4gICAgdGhpcy51c2Vyc1RhYmxlLnRhYmxlLmdyYW50RnVsbEFjY2Vzcyh0aGlzLnByb3BzLnBvc3RDb25maXJtYXRpb25Ib29rKTtcbiAgICB0aGlzLnByb3BzLnN5bmNVc2Vyc3RvQWxnb2xpYS5hZGRFdmVudFNvdXJjZShcbiAgICAgIG5ldyBldmVudHNvdXJjZXMuRHluYW1vRXZlbnRTb3VyY2UodGhpcy51c2Vyc1RhYmxlLnRhYmxlLCB7XG4gICAgICAgIHN0YXJ0aW5nUG9zaXRpb246IGNkay5hd3NfbGFtYmRhLlN0YXJ0aW5nUG9zaXRpb24uTEFURVNUXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpbml0aWFsaXplVHdlZXRzVGFibGVXaXRoQWNjZXNzKCkge1xuICAgIHRoaXMudHdlZXRzVGFibGUgPSBuZXcgVHdlZXRzVGFibGUodGhpcywgJ1R3ZWV0c1RhYmxlJyk7XG4gICAgdGhpcy50d2VldHNUYWJsZS50YWJsZS5ncmFudEZ1bGxBY2Nlc3MoXG4gICAgICB0aGlzLnByb3BzLmRpc3RyaWJ1dGVUd2VldFdpdGhGb2xsb3dlcnNcbiAgICApO1xuICAgIHRoaXMucHJvcHMuZGlzdHJpYnV0ZWRUd2VldC5hZGRFdmVudFNvdXJjZShcbiAgICAgIG5ldyBldmVudHNvdXJjZXMuRHluYW1vRXZlbnRTb3VyY2UodGhpcy50d2VldHNUYWJsZS50YWJsZSwge1xuICAgICAgICBzdGFydGluZ1Bvc2l0aW9uOiBjZGsuYXdzX2xhbWJkYS5TdGFydGluZ1Bvc2l0aW9uLkxBVEVTVFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgdGhpcy5wcm9wcy5zeW5jVHdlZXRzVG9BbGdvbGlhLmFkZEV2ZW50U291cmNlKFxuICAgICAgbmV3IGV2ZW50c291cmNlcy5EeW5hbW9FdmVudFNvdXJjZSh0aGlzLnR3ZWV0c1RhYmxlLnRhYmxlLCB7XG4gICAgICAgIHN0YXJ0aW5nUG9zaXRpb246IGNkay5hd3NfbGFtYmRhLlN0YXJ0aW5nUG9zaXRpb24uTEFURVNUXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpbml0aWFsaXplVGltZUxpbmVzVGFibGVXaXRoQWNjZXNzKCkge1xuICAgIHRoaXMudGltZWxpbmVzVGFibGUgPSBuZXcgVGltZWxpbmVzVGFibGUodGhpcywgJ1RpbWVsaW5lc1RhYmxlJyk7XG4gICAgdGhpcy50aW1lbGluZXNUYWJsZS50YWJsZS5ncmFudEZ1bGxBY2Nlc3ModGhpcy5wcm9wcy5kaXN0cmlidXRlZFR3ZWV0KTtcbiAgICB0aGlzLnRpbWVsaW5lc1RhYmxlLnRhYmxlLmdyYW50RnVsbEFjY2VzcyhcbiAgICAgIHRoaXMucHJvcHMuZGlzdHJpYnV0ZVR3ZWV0V2l0aEZvbGxvd2Vyc1xuICAgICk7XG4gIH1cblxuICBpbml0aWFsaXplTGlrZXNUYWJsZVdpdGhBY2Nlc3MoKSB7XG4gICAgdGhpcy5saWtlc1RhYmxlID0gbmV3IExpa2VzVGFibGUodGhpcywgJ0xpa2VzVGFibGUnKTtcbiAgfVxuICBpbml0aWFsaXplUmV0d2VldFRhYmxlV2l0aEFjY2VzcygpIHtcbiAgICB0aGlzLnJldHdlZXRUYWJsZSA9IG5ldyBSZXR3ZWV0c1RhYmxlKHRoaXMsICdSZXR3ZWV0c1RhYmxlJyk7XG4gIH1cblxuICBpbml0aWFsaXplUmVsYXRpb25zaGlwc1RhYmxlV2l0aEFjY2VzcygpIHtcbiAgICB0aGlzLnJlbGF0aW9uU2hpcHNUYWJsZSA9IG5ldyBSZWxhdGlvbnNoaXBzVGFibGUoXG4gICAgICB0aGlzLFxuICAgICAgJ1JlbGF0aW9uc2hpcHNUYWJsZSdcbiAgICApO1xuICAgIHRoaXMucmVsYXRpb25TaGlwc1RhYmxlLnRhYmxlLmdyYW50RnVsbEFjY2Vzcyh0aGlzLnByb3BzLmRpc3RyaWJ1dGVkVHdlZXQpO1xuICAgIHRoaXMucmVsYXRpb25TaGlwc1RhYmxlLnRhYmxlLmdyYW50RnVsbEFjY2VzcyhcbiAgICAgIHRoaXMucHJvcHMuZGlzdHJpYnV0ZVR3ZWV0V2l0aEZvbGxvd2Vyc1xuICAgICk7XG4gICAgdGhpcy5wcm9wcy5kaXN0cmlidXRlVHdlZXRXaXRoRm9sbG93ZXJzLmFkZEV2ZW50U291cmNlKFxuICAgICAgbmV3IGV2ZW50c291cmNlcy5EeW5hbW9FdmVudFNvdXJjZSh0aGlzLnJlbGF0aW9uU2hpcHNUYWJsZS50YWJsZSwge1xuICAgICAgICBzdGFydGluZ1Bvc2l0aW9uOiBjZGsuYXdzX2xhbWJkYS5TdGFydGluZ1Bvc2l0aW9uLkxBVEVTVFxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG4iXX0=