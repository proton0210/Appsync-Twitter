"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComputeStack = void 0;
const SendDirectMessage_1 = require("./Constructs/SendDirectMessage");
const NotifyLiked_1 = require("./Constructs/NotifyLiked");
const SyncTweetsToAlgolia_1 = require("./Constructs/SyncTweetsToAlgolia");
const SyncUsersToAlgolia_1 = require("./Constructs/SyncUsersToAlgolia");
const Distribute_Tweet_To_Followers_1 = require("./Constructs/Distribute-Tweet-To-Followers");
const Distribute_Tweet_1 = require("./Constructs/Distribute-Tweet");
const confirm_user_1 = require("./Constructs/confirm-user");
const cdk = require("aws-cdk-lib");
const Notify_1 = require("./Constructs/Notify");
class ComputeStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const confirmUserSignUpTrigger = new confirm_user_1.ConfirmUserSignUp(this, 'ConfirmUserSignUp');
        const distributedTweet = new Distribute_Tweet_1.DistributeTweet(this, 'DistributeTweet');
        const distributeTweetToFollowers = new Distribute_Tweet_To_Followers_1.DistributeTweetsToFollowers(this, 'DistributeTweetToFollowers');
        const syncUsersToAlgolia = new SyncUsersToAlgolia_1.SyncUsersToAlgolia(this, 'SyncUsersToAlgolia');
        const syncTweetsToAlgolia = new SyncTweetsToAlgolia_1.SyncTweetsToAlgolia(this, 'SyncTweetsToAlgolia');
        const notify = new Notify_1.Notify(this, 'Notify');
        const notifyLiked = new NotifyLiked_1.NotifyLiked(this, 'NotifyLiked');
        const sendDirectMessage = new SendDirectMessage_1.SendDirectMessage(this, 'SendDirectMessage');
        this.postConfirmationHook = confirmUserSignUpTrigger.confirmUserSignUp;
        this.distributedTweet = distributedTweet.DistributeTweet;
        this.distributeTweetToFollowers =
            distributeTweetToFollowers.DistributeTweetsToFollowers;
        this.syncUsersToAlgolia = syncUsersToAlgolia.SyncUsersToAlgolia;
        this.syncTweetsToAlgolia = syncTweetsToAlgolia.SyncTweetsToAlgolia;
        this.Notify = notify.Notify;
        this.NotifyLiked = notifyLiked.NotifyLiked;
        this.sendDirectMessage = sendDirectMessage.SendDirectMessagefunction;
    }
}
exports.ComputeStack = ComputeStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHV0ZS1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbXB1dGUtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsc0VBQW1FO0FBQ25FLDBEQUF1RDtBQUN2RCwwRUFBdUU7QUFDdkUsd0VBQXFFO0FBQ3JFLDhGQUF5RjtBQUN6RixvRUFBZ0U7QUFDaEUsNERBQThEO0FBQzlELG1DQUFtQztBQUVuQyxnREFBNkM7QUFFN0MsTUFBYSxZQUFhLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFVekMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUM5RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QixNQUFNLHdCQUF3QixHQUFHLElBQUksZ0NBQWlCLENBQ3BELElBQUksRUFDSixtQkFBbUIsQ0FDcEIsQ0FBQztRQUNGLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxrQ0FBZSxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sMEJBQTBCLEdBQUcsSUFBSSwyREFBMkIsQ0FDaEUsSUFBSSxFQUNKLDRCQUE0QixDQUM3QixDQUFDO1FBRUYsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLHVDQUFrQixDQUMvQyxJQUFJLEVBQ0osb0JBQW9CLENBQ3JCLENBQUM7UUFFRixNQUFNLG1CQUFtQixHQUFHLElBQUkseUNBQW1CLENBQ2pELElBQUksRUFDSixxQkFBcUIsQ0FDdEIsQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUUxQyxNQUFNLFdBQVcsR0FBRyxJQUFJLHlCQUFXLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3pELE1BQU0saUJBQWlCLEdBQUcsSUFBSSxxQ0FBaUIsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUUzRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsd0JBQXdCLENBQUMsaUJBQWlCLENBQUM7UUFDdkUsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDLGVBQWUsQ0FBQztRQUN6RCxJQUFJLENBQUMsMEJBQTBCO1lBQzdCLDBCQUEwQixDQUFDLDJCQUEyQixDQUFDO1FBQ3pELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQztRQUNoRSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsbUJBQW1CLENBQUMsbUJBQW1CLENBQUM7UUFDbkUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzVCLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQztRQUMzQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUMseUJBQXlCLENBQUM7SUFDdkUsQ0FBQztDQUNGO0FBL0NELG9DQStDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlbmREaXJlY3RNZXNzYWdlIH0gZnJvbSAnLi9Db25zdHJ1Y3RzL1NlbmREaXJlY3RNZXNzYWdlJztcbmltcG9ydCB7IE5vdGlmeUxpa2VkIH0gZnJvbSAnLi9Db25zdHJ1Y3RzL05vdGlmeUxpa2VkJztcbmltcG9ydCB7IFN5bmNUd2VldHNUb0FsZ29saWEgfSBmcm9tICcuL0NvbnN0cnVjdHMvU3luY1R3ZWV0c1RvQWxnb2xpYSc7XG5pbXBvcnQgeyBTeW5jVXNlcnNUb0FsZ29saWEgfSBmcm9tICcuL0NvbnN0cnVjdHMvU3luY1VzZXJzVG9BbGdvbGlhJztcbmltcG9ydCB7IERpc3RyaWJ1dGVUd2VldHNUb0ZvbGxvd2VycyB9IGZyb20gJy4vQ29uc3RydWN0cy9EaXN0cmlidXRlLVR3ZWV0LVRvLUZvbGxvd2Vycyc7XG5pbXBvcnQgeyBEaXN0cmlidXRlVHdlZXQgfSBmcm9tICcuL0NvbnN0cnVjdHMvRGlzdHJpYnV0ZS1Ud2VldCc7XG5pbXBvcnQgeyBDb25maXJtVXNlclNpZ25VcCB9IGZyb20gJy4vQ29uc3RydWN0cy9jb25maXJtLXVzZXInO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgTm90aWZ5IH0gZnJvbSAnLi9Db25zdHJ1Y3RzL05vdGlmeSc7XG5cbmV4cG9ydCBjbGFzcyBDb21wdXRlU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICBwdWJsaWMgcmVhZG9ubHkgcG9zdENvbmZpcm1hdGlvbkhvb2s6IGNkay5hd3NfbGFtYmRhX25vZGVqcy5Ob2RlanNGdW5jdGlvbjtcbiAgcHVibGljIHJlYWRvbmx5IGRpc3RyaWJ1dGVkVHdlZXQ6IGNkay5hd3NfbGFtYmRhX25vZGVqcy5Ob2RlanNGdW5jdGlvbjtcbiAgcHVibGljIHJlYWRvbmx5IGRpc3RyaWJ1dGVUd2VldFRvRm9sbG93ZXJzOiBjZGsuYXdzX2xhbWJkYV9ub2RlanMuTm9kZWpzRnVuY3Rpb247XG4gIHB1YmxpYyByZWFkb25seSBOb3RpZnk6IGNkay5hd3NfbGFtYmRhX25vZGVqcy5Ob2RlanNGdW5jdGlvbjtcbiAgcHVibGljIHJlYWRvbmx5IE5vdGlmeUxpa2VkOiBjZGsuYXdzX2xhbWJkYV9ub2RlanMuTm9kZWpzRnVuY3Rpb247XG4gIHB1YmxpYyByZWFkb25seSBzeW5jVXNlcnNUb0FsZ29saWE6IGNkay5hd3NfbGFtYmRhX25vZGVqcy5Ob2RlanNGdW5jdGlvbjtcbiAgcHVibGljIHJlYWRvbmx5IHN5bmNUd2VldHNUb0FsZ29saWE6IGNkay5hd3NfbGFtYmRhX25vZGVqcy5Ob2RlanNGdW5jdGlvbjtcbiAgcHVibGljIHJlYWRvbmx5IHNlbmREaXJlY3RNZXNzYWdlOiBjZGsuYXdzX2xhbWJkYV9ub2RlanMuTm9kZWpzRnVuY3Rpb247XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBjZGsuU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuICAgIGNvbnN0IGNvbmZpcm1Vc2VyU2lnblVwVHJpZ2dlciA9IG5ldyBDb25maXJtVXNlclNpZ25VcChcbiAgICAgIHRoaXMsXG4gICAgICAnQ29uZmlybVVzZXJTaWduVXAnXG4gICAgKTtcbiAgICBjb25zdCBkaXN0cmlidXRlZFR3ZWV0ID0gbmV3IERpc3RyaWJ1dGVUd2VldCh0aGlzLCAnRGlzdHJpYnV0ZVR3ZWV0Jyk7XG4gICAgY29uc3QgZGlzdHJpYnV0ZVR3ZWV0VG9Gb2xsb3dlcnMgPSBuZXcgRGlzdHJpYnV0ZVR3ZWV0c1RvRm9sbG93ZXJzKFxuICAgICAgdGhpcyxcbiAgICAgICdEaXN0cmlidXRlVHdlZXRUb0ZvbGxvd2VycydcbiAgICApO1xuXG4gICAgY29uc3Qgc3luY1VzZXJzVG9BbGdvbGlhID0gbmV3IFN5bmNVc2Vyc1RvQWxnb2xpYShcbiAgICAgIHRoaXMsXG4gICAgICAnU3luY1VzZXJzVG9BbGdvbGlhJ1xuICAgICk7XG5cbiAgICBjb25zdCBzeW5jVHdlZXRzVG9BbGdvbGlhID0gbmV3IFN5bmNUd2VldHNUb0FsZ29saWEoXG4gICAgICB0aGlzLFxuICAgICAgJ1N5bmNUd2VldHNUb0FsZ29saWEnXG4gICAgKTtcblxuICAgIGNvbnN0IG5vdGlmeSA9IG5ldyBOb3RpZnkodGhpcywgJ05vdGlmeScpO1xuXG4gICAgY29uc3Qgbm90aWZ5TGlrZWQgPSBuZXcgTm90aWZ5TGlrZWQodGhpcywgJ05vdGlmeUxpa2VkJyk7XG4gICAgY29uc3Qgc2VuZERpcmVjdE1lc3NhZ2UgPSBuZXcgU2VuZERpcmVjdE1lc3NhZ2UodGhpcywgJ1NlbmREaXJlY3RNZXNzYWdlJyk7XG5cbiAgICB0aGlzLnBvc3RDb25maXJtYXRpb25Ib29rID0gY29uZmlybVVzZXJTaWduVXBUcmlnZ2VyLmNvbmZpcm1Vc2VyU2lnblVwO1xuICAgIHRoaXMuZGlzdHJpYnV0ZWRUd2VldCA9IGRpc3RyaWJ1dGVkVHdlZXQuRGlzdHJpYnV0ZVR3ZWV0O1xuICAgIHRoaXMuZGlzdHJpYnV0ZVR3ZWV0VG9Gb2xsb3dlcnMgPVxuICAgICAgZGlzdHJpYnV0ZVR3ZWV0VG9Gb2xsb3dlcnMuRGlzdHJpYnV0ZVR3ZWV0c1RvRm9sbG93ZXJzO1xuICAgIHRoaXMuc3luY1VzZXJzVG9BbGdvbGlhID0gc3luY1VzZXJzVG9BbGdvbGlhLlN5bmNVc2Vyc1RvQWxnb2xpYTtcbiAgICB0aGlzLnN5bmNUd2VldHNUb0FsZ29saWEgPSBzeW5jVHdlZXRzVG9BbGdvbGlhLlN5bmNUd2VldHNUb0FsZ29saWE7XG4gICAgdGhpcy5Ob3RpZnkgPSBub3RpZnkuTm90aWZ5O1xuICAgIHRoaXMuTm90aWZ5TGlrZWQgPSBub3RpZnlMaWtlZC5Ob3RpZnlMaWtlZDtcbiAgICB0aGlzLnNlbmREaXJlY3RNZXNzYWdlID0gc2VuZERpcmVjdE1lc3NhZ2UuU2VuZERpcmVjdE1lc3NhZ2VmdW5jdGlvbjtcbiAgfVxufVxuIl19