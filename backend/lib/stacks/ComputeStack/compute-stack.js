"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComputeStack = void 0;
const NotifyLiked_1 = require("./Constructs/NotifyLiked");
const SyncTweetsToAlgolia_1 = require("./Constructs/SyncTweetsToAlgolia");
const SyncUsersToAlgolia_1 = require("./Constructs/SyncUsersToAlgolia");
const Distribute_Tweet_To_Followers_1 = require("./Constructs/Distribute-Tweet-To-Followers");
const Distribute_Tweet_1 = require("./Constructs/Distribute-Tweet");
const confirm_user_1 = require("./Constructs/confirm-user");
const cdk = require("aws-cdk-lib");
const Notify_1 = require("./Constructs/Notify");
class ComputeStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const confirmUserSignUpTrigger = new confirm_user_1.ConfirmUserSignUp(this, 'ConfirmUserSignUp');
        const distributedTweet = new Distribute_Tweet_1.DistributeTweet(this, 'DistributeTweet');
        const distributeTweetToFollowers = new Distribute_Tweet_To_Followers_1.DistributeTweetsToFollowers(this, 'DistributeTweetToFollowers');
        const syncUsersToAlgolia = new SyncUsersToAlgolia_1.SyncUsersToAlgolia(this, 'SyncUsersToAlgolia');
        const syncTweetsToAlgolia = new SyncTweetsToAlgolia_1.SyncTweetsToAlgolia(this, 'SyncTweetsToAlgolia');
        const notify = new Notify_1.Notify(this, 'Notify');
        const notifyLiked = new NotifyLiked_1.NotifyLiked(this, 'NotifyLiked');
        this.postConfirmationHook = confirmUserSignUpTrigger.confirmUserSignUp;
        this.distributedTweet = distributedTweet.DistributeTweet;
        this.distributeTweetToFollowers =
            distributeTweetToFollowers.DistributeTweetsToFollowers;
        this.syncUsersToAlgolia = syncUsersToAlgolia.SyncUsersToAlgolia;
        this.syncTweetsToAlgolia = syncTweetsToAlgolia.SyncTweetsToAlgolia;
        this.Notify = notify.Notify;
        this.NotifyLiked = notifyLiked.NotifyLiked;
    }
}
exports.ComputeStack = ComputeStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHV0ZS1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbXB1dGUtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQXVEO0FBQ3ZELDBFQUF1RTtBQUN2RSx3RUFBcUU7QUFDckUsOEZBQXlGO0FBQ3pGLG9FQUFnRTtBQUNoRSw0REFBOEQ7QUFDOUQsbUNBQW1DO0FBRW5DLGdEQUE2QztBQUU3QyxNQUFhLFlBQWEsU0FBUSxHQUFHLENBQUMsS0FBSztJQVN6QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQzlELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxnQ0FBaUIsQ0FDcEQsSUFBSSxFQUNKLG1CQUFtQixDQUNwQixDQUFDO1FBQ0YsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGtDQUFlLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDdEUsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLDJEQUEyQixDQUNoRSxJQUFJLEVBQ0osNEJBQTRCLENBQzdCLENBQUM7UUFFRixNQUFNLGtCQUFrQixHQUFHLElBQUksdUNBQWtCLENBQy9DLElBQUksRUFDSixvQkFBb0IsQ0FDckIsQ0FBQztRQUVGLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSx5Q0FBbUIsQ0FDakQsSUFBSSxFQUNKLHFCQUFxQixDQUN0QixDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRTFDLE1BQU0sV0FBVyxHQUFHLElBQUkseUJBQVcsQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFFekQsSUFBSSxDQUFDLG9CQUFvQixHQUFHLHdCQUF3QixDQUFDLGlCQUFpQixDQUFDO1FBQ3ZFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUM7UUFDekQsSUFBSSxDQUFDLDBCQUEwQjtZQUM3QiwwQkFBMEIsQ0FBQywyQkFBMkIsQ0FBQztRQUN6RCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsa0JBQWtCLENBQUM7UUFDaEUsSUFBSSxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDO1FBQ25FLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUM7SUFDN0MsQ0FBQztDQUNGO0FBNUNELG9DQTRDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vdGlmeUxpa2VkIH0gZnJvbSAnLi9Db25zdHJ1Y3RzL05vdGlmeUxpa2VkJztcbmltcG9ydCB7IFN5bmNUd2VldHNUb0FsZ29saWEgfSBmcm9tICcuL0NvbnN0cnVjdHMvU3luY1R3ZWV0c1RvQWxnb2xpYSc7XG5pbXBvcnQgeyBTeW5jVXNlcnNUb0FsZ29saWEgfSBmcm9tICcuL0NvbnN0cnVjdHMvU3luY1VzZXJzVG9BbGdvbGlhJztcbmltcG9ydCB7IERpc3RyaWJ1dGVUd2VldHNUb0ZvbGxvd2VycyB9IGZyb20gJy4vQ29uc3RydWN0cy9EaXN0cmlidXRlLVR3ZWV0LVRvLUZvbGxvd2Vycyc7XG5pbXBvcnQgeyBEaXN0cmlidXRlVHdlZXQgfSBmcm9tICcuL0NvbnN0cnVjdHMvRGlzdHJpYnV0ZS1Ud2VldCc7XG5pbXBvcnQgeyBDb25maXJtVXNlclNpZ25VcCB9IGZyb20gJy4vQ29uc3RydWN0cy9jb25maXJtLXVzZXInO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgTm90aWZ5IH0gZnJvbSAnLi9Db25zdHJ1Y3RzL05vdGlmeSc7XG5cbmV4cG9ydCBjbGFzcyBDb21wdXRlU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICBwdWJsaWMgcmVhZG9ubHkgcG9zdENvbmZpcm1hdGlvbkhvb2s6IGNkay5hd3NfbGFtYmRhX25vZGVqcy5Ob2RlanNGdW5jdGlvbjtcbiAgcHVibGljIHJlYWRvbmx5IGRpc3RyaWJ1dGVkVHdlZXQ6IGNkay5hd3NfbGFtYmRhX25vZGVqcy5Ob2RlanNGdW5jdGlvbjtcbiAgcHVibGljIHJlYWRvbmx5IGRpc3RyaWJ1dGVUd2VldFRvRm9sbG93ZXJzOiBjZGsuYXdzX2xhbWJkYV9ub2RlanMuTm9kZWpzRnVuY3Rpb247XG4gIHB1YmxpYyByZWFkb25seSBOb3RpZnk6IGNkay5hd3NfbGFtYmRhX25vZGVqcy5Ob2RlanNGdW5jdGlvbjtcbiAgcHVibGljIHJlYWRvbmx5IE5vdGlmeUxpa2VkOiBjZGsuYXdzX2xhbWJkYV9ub2RlanMuTm9kZWpzRnVuY3Rpb247XG4gIHB1YmxpYyByZWFkb25seSBzeW5jVXNlcnNUb0FsZ29saWE6IGNkay5hd3NfbGFtYmRhX25vZGVqcy5Ob2RlanNGdW5jdGlvbjtcbiAgcHVibGljIHJlYWRvbmx5IHN5bmNUd2VldHNUb0FsZ29saWE6IGNkay5hd3NfbGFtYmRhX25vZGVqcy5Ob2RlanNGdW5jdGlvbjtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IGNkay5TdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG4gICAgY29uc3QgY29uZmlybVVzZXJTaWduVXBUcmlnZ2VyID0gbmV3IENvbmZpcm1Vc2VyU2lnblVwKFxuICAgICAgdGhpcyxcbiAgICAgICdDb25maXJtVXNlclNpZ25VcCdcbiAgICApO1xuICAgIGNvbnN0IGRpc3RyaWJ1dGVkVHdlZXQgPSBuZXcgRGlzdHJpYnV0ZVR3ZWV0KHRoaXMsICdEaXN0cmlidXRlVHdlZXQnKTtcbiAgICBjb25zdCBkaXN0cmlidXRlVHdlZXRUb0ZvbGxvd2VycyA9IG5ldyBEaXN0cmlidXRlVHdlZXRzVG9Gb2xsb3dlcnMoXG4gICAgICB0aGlzLFxuICAgICAgJ0Rpc3RyaWJ1dGVUd2VldFRvRm9sbG93ZXJzJ1xuICAgICk7XG5cbiAgICBjb25zdCBzeW5jVXNlcnNUb0FsZ29saWEgPSBuZXcgU3luY1VzZXJzVG9BbGdvbGlhKFxuICAgICAgdGhpcyxcbiAgICAgICdTeW5jVXNlcnNUb0FsZ29saWEnXG4gICAgKTtcblxuICAgIGNvbnN0IHN5bmNUd2VldHNUb0FsZ29saWEgPSBuZXcgU3luY1R3ZWV0c1RvQWxnb2xpYShcbiAgICAgIHRoaXMsXG4gICAgICAnU3luY1R3ZWV0c1RvQWxnb2xpYSdcbiAgICApO1xuXG4gICAgY29uc3Qgbm90aWZ5ID0gbmV3IE5vdGlmeSh0aGlzLCAnTm90aWZ5Jyk7XG5cbiAgICBjb25zdCBub3RpZnlMaWtlZCA9IG5ldyBOb3RpZnlMaWtlZCh0aGlzLCAnTm90aWZ5TGlrZWQnKTtcblxuICAgIHRoaXMucG9zdENvbmZpcm1hdGlvbkhvb2sgPSBjb25maXJtVXNlclNpZ25VcFRyaWdnZXIuY29uZmlybVVzZXJTaWduVXA7XG4gICAgdGhpcy5kaXN0cmlidXRlZFR3ZWV0ID0gZGlzdHJpYnV0ZWRUd2VldC5EaXN0cmlidXRlVHdlZXQ7XG4gICAgdGhpcy5kaXN0cmlidXRlVHdlZXRUb0ZvbGxvd2VycyA9XG4gICAgICBkaXN0cmlidXRlVHdlZXRUb0ZvbGxvd2Vycy5EaXN0cmlidXRlVHdlZXRzVG9Gb2xsb3dlcnM7XG4gICAgdGhpcy5zeW5jVXNlcnNUb0FsZ29saWEgPSBzeW5jVXNlcnNUb0FsZ29saWEuU3luY1VzZXJzVG9BbGdvbGlhO1xuICAgIHRoaXMuc3luY1R3ZWV0c1RvQWxnb2xpYSA9IHN5bmNUd2VldHNUb0FsZ29saWEuU3luY1R3ZWV0c1RvQWxnb2xpYTtcbiAgICB0aGlzLk5vdGlmeSA9IG5vdGlmeS5Ob3RpZnk7XG4gICAgdGhpcy5Ob3RpZnlMaWtlZCA9IG5vdGlmeUxpa2VkLk5vdGlmeUxpa2VkO1xuICB9XG59XG4iXX0=