"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComputeStack = void 0;
const SyncTweetsToAlgolia_1 = require("./Constructs/SyncTweetsToAlgolia");
const SyncUsersToAlgolia_1 = require("./Constructs/SyncUsersToAlgolia");
const Distribute_Tweet_To_Followers_1 = require("./Constructs/Distribute-Tweet-To-Followers");
const Distribute_Tweet_1 = require("./Constructs/Distribute-Tweet");
const confirm_user_1 = require("./Constructs/confirm-user");
const cdk = require("aws-cdk-lib");
class ComputeStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const confirmUserSignUpTrigger = new confirm_user_1.ConfirmUserSignUp(this, 'ConfirmUserSignUp');
        const distributedTweet = new Distribute_Tweet_1.DistributeTweet(this, 'DistributeTweet');
        const distributeTweetToFollowers = new Distribute_Tweet_To_Followers_1.DistributeTweetsToFollowers(this, 'DistributeTweetToFollowers');
        const syncUsersToAlgolia = new SyncUsersToAlgolia_1.SyncUsersToAlgolia(this, 'SyncUsersToAlgolia');
        const syncTweetsToAlgolia = new SyncTweetsToAlgolia_1.SyncTweetsToAlgolia(this, 'SyncTweetsToAlgolia');
        this.postConfirmationHook = confirmUserSignUpTrigger.confirmUserSignUp;
        this.distributedTweet = distributedTweet.DistributeTweet;
        this.distributeTweetToFollowers =
            distributeTweetToFollowers.DistributeTweetsToFollowers;
        this.syncUsersToAlgolia = syncUsersToAlgolia.SyncUsersToAlgolia;
        this.syncTweetsToAlgolia = syncTweetsToAlgolia.SyncTweetsToAlgolia;
    }
}
exports.ComputeStack = ComputeStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHV0ZS1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbXB1dGUtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMEVBQXVFO0FBQ3ZFLHdFQUFxRTtBQUNyRSw4RkFBeUY7QUFDekYsb0VBQWdFO0FBQ2hFLDREQUE4RDtBQUM5RCxtQ0FBbUM7QUFHbkMsTUFBYSxZQUFhLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFPekMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUM5RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QixNQUFNLHdCQUF3QixHQUFHLElBQUksZ0NBQWlCLENBQ3BELElBQUksRUFDSixtQkFBbUIsQ0FDcEIsQ0FBQztRQUNGLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxrQ0FBZSxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sMEJBQTBCLEdBQUcsSUFBSSwyREFBMkIsQ0FDaEUsSUFBSSxFQUNKLDRCQUE0QixDQUM3QixDQUFDO1FBRUYsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLHVDQUFrQixDQUMvQyxJQUFJLEVBQ0osb0JBQW9CLENBQ3JCLENBQUM7UUFFRixNQUFNLG1CQUFtQixHQUFHLElBQUkseUNBQW1CLENBQ2pELElBQUksRUFDSixxQkFBcUIsQ0FDdEIsQ0FBQztRQUVGLElBQUksQ0FBQyxvQkFBb0IsR0FBRyx3QkFBd0IsQ0FBQyxpQkFBaUIsQ0FBQztRQUN2RSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsZUFBZSxDQUFDO1FBQ3pELElBQUksQ0FBQywwQkFBMEI7WUFDN0IsMEJBQTBCLENBQUMsMkJBQTJCLENBQUM7UUFDekQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDLGtCQUFrQixDQUFDO1FBQ2hFLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQyxtQkFBbUIsQ0FBQztJQUNyRSxDQUFDO0NBQ0Y7QUFwQ0Qsb0NBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3luY1R3ZWV0c1RvQWxnb2xpYSB9IGZyb20gJy4vQ29uc3RydWN0cy9TeW5jVHdlZXRzVG9BbGdvbGlhJztcbmltcG9ydCB7IFN5bmNVc2Vyc1RvQWxnb2xpYSB9IGZyb20gJy4vQ29uc3RydWN0cy9TeW5jVXNlcnNUb0FsZ29saWEnO1xuaW1wb3J0IHsgRGlzdHJpYnV0ZVR3ZWV0c1RvRm9sbG93ZXJzIH0gZnJvbSAnLi9Db25zdHJ1Y3RzL0Rpc3RyaWJ1dGUtVHdlZXQtVG8tRm9sbG93ZXJzJztcbmltcG9ydCB7IERpc3RyaWJ1dGVUd2VldCB9IGZyb20gJy4vQ29uc3RydWN0cy9EaXN0cmlidXRlLVR3ZWV0JztcbmltcG9ydCB7IENvbmZpcm1Vc2VyU2lnblVwIH0gZnJvbSAnLi9Db25zdHJ1Y3RzL2NvbmZpcm0tdXNlcic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5cbmV4cG9ydCBjbGFzcyBDb21wdXRlU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICBwdWJsaWMgcmVhZG9ubHkgcG9zdENvbmZpcm1hdGlvbkhvb2s6IGNkay5hd3NfbGFtYmRhX25vZGVqcy5Ob2RlanNGdW5jdGlvbjtcbiAgcHVibGljIHJlYWRvbmx5IGRpc3RyaWJ1dGVkVHdlZXQ6IGNkay5hd3NfbGFtYmRhX25vZGVqcy5Ob2RlanNGdW5jdGlvbjtcbiAgcHVibGljIHJlYWRvbmx5IGRpc3RyaWJ1dGVUd2VldFRvRm9sbG93ZXJzOiBjZGsuYXdzX2xhbWJkYV9ub2RlanMuTm9kZWpzRnVuY3Rpb247XG4gIHB1YmxpYyByZWFkb25seSBzeW5jVXNlcnNUb0FsZ29saWE6IGNkay5hd3NfbGFtYmRhX25vZGVqcy5Ob2RlanNGdW5jdGlvbjtcbiAgcHVibGljIHJlYWRvbmx5IHN5bmNUd2VldHNUb0FsZ29saWE6IGNkay5hd3NfbGFtYmRhX25vZGVqcy5Ob2RlanNGdW5jdGlvbjtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IGNkay5TdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG4gICAgY29uc3QgY29uZmlybVVzZXJTaWduVXBUcmlnZ2VyID0gbmV3IENvbmZpcm1Vc2VyU2lnblVwKFxuICAgICAgdGhpcyxcbiAgICAgICdDb25maXJtVXNlclNpZ25VcCdcbiAgICApO1xuICAgIGNvbnN0IGRpc3RyaWJ1dGVkVHdlZXQgPSBuZXcgRGlzdHJpYnV0ZVR3ZWV0KHRoaXMsICdEaXN0cmlidXRlVHdlZXQnKTtcbiAgICBjb25zdCBkaXN0cmlidXRlVHdlZXRUb0ZvbGxvd2VycyA9IG5ldyBEaXN0cmlidXRlVHdlZXRzVG9Gb2xsb3dlcnMoXG4gICAgICB0aGlzLFxuICAgICAgJ0Rpc3RyaWJ1dGVUd2VldFRvRm9sbG93ZXJzJ1xuICAgICk7XG5cbiAgICBjb25zdCBzeW5jVXNlcnNUb0FsZ29saWEgPSBuZXcgU3luY1VzZXJzVG9BbGdvbGlhKFxuICAgICAgdGhpcyxcbiAgICAgICdTeW5jVXNlcnNUb0FsZ29saWEnXG4gICAgKTtcblxuICAgIGNvbnN0IHN5bmNUd2VldHNUb0FsZ29saWEgPSBuZXcgU3luY1R3ZWV0c1RvQWxnb2xpYShcbiAgICAgIHRoaXMsXG4gICAgICAnU3luY1R3ZWV0c1RvQWxnb2xpYSdcbiAgICApO1xuXG4gICAgdGhpcy5wb3N0Q29uZmlybWF0aW9uSG9vayA9IGNvbmZpcm1Vc2VyU2lnblVwVHJpZ2dlci5jb25maXJtVXNlclNpZ25VcDtcbiAgICB0aGlzLmRpc3RyaWJ1dGVkVHdlZXQgPSBkaXN0cmlidXRlZFR3ZWV0LkRpc3RyaWJ1dGVUd2VldDtcbiAgICB0aGlzLmRpc3RyaWJ1dGVUd2VldFRvRm9sbG93ZXJzID1cbiAgICAgIGRpc3RyaWJ1dGVUd2VldFRvRm9sbG93ZXJzLkRpc3RyaWJ1dGVUd2VldHNUb0ZvbGxvd2VycztcbiAgICB0aGlzLnN5bmNVc2Vyc1RvQWxnb2xpYSA9IHN5bmNVc2Vyc1RvQWxnb2xpYS5TeW5jVXNlcnNUb0FsZ29saWE7XG4gICAgdGhpcy5zeW5jVHdlZXRzVG9BbGdvbGlhID0gc3luY1R3ZWV0c1RvQWxnb2xpYS5TeW5jVHdlZXRzVG9BbGdvbGlhO1xuICB9XG59XG4iXX0=