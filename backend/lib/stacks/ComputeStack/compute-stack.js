"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComputeStack = void 0;
const SyncTweetsToAlgolia_1 = require("./Constructs/SyncTweetsToAlgolia");
const SyncUsersToAlgolia_1 = require("./Constructs/SyncUsersToAlgolia");
const Distribute_Tweet_To_Followers_1 = require("./Constructs/Distribute-Tweet-To-Followers");
const Distribute_Tweet_1 = require("./Constructs/Distribute-Tweet");
const confirm_user_1 = require("./Constructs/confirm-user");
const cdk = require("aws-cdk-lib");
const Notify_1 = require("./Constructs/Notify");
class ComputeStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const confirmUserSignUpTrigger = new confirm_user_1.ConfirmUserSignUp(this, 'ConfirmUserSignUp');
        const distributedTweet = new Distribute_Tweet_1.DistributeTweet(this, 'DistributeTweet');
        const distributeTweetToFollowers = new Distribute_Tweet_To_Followers_1.DistributeTweetsToFollowers(this, 'DistributeTweetToFollowers');
        const syncUsersToAlgolia = new SyncUsersToAlgolia_1.SyncUsersToAlgolia(this, 'SyncUsersToAlgolia');
        const syncTweetsToAlgolia = new SyncTweetsToAlgolia_1.SyncTweetsToAlgolia(this, 'SyncTweetsToAlgolia');
        const notify = new Notify_1.Notify(this, 'Notify');
        this.postConfirmationHook = confirmUserSignUpTrigger.confirmUserSignUp;
        this.distributedTweet = distributedTweet.DistributeTweet;
        this.distributeTweetToFollowers =
            distributeTweetToFollowers.DistributeTweetsToFollowers;
        this.syncUsersToAlgolia = syncUsersToAlgolia.SyncUsersToAlgolia;
        this.syncTweetsToAlgolia = syncTweetsToAlgolia.SyncTweetsToAlgolia;
        this.Notify = notify.Notify;
    }
}
exports.ComputeStack = ComputeStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHV0ZS1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbXB1dGUtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMEVBQXVFO0FBQ3ZFLHdFQUFxRTtBQUNyRSw4RkFBeUY7QUFDekYsb0VBQWdFO0FBQ2hFLDREQUE4RDtBQUM5RCxtQ0FBbUM7QUFFbkMsZ0RBQTZDO0FBRTdDLE1BQWEsWUFBYSxTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBUXpDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBc0I7UUFDOUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEIsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLGdDQUFpQixDQUNwRCxJQUFJLEVBQ0osbUJBQW1CLENBQ3BCLENBQUM7UUFDRixNQUFNLGdCQUFnQixHQUFHLElBQUksa0NBQWUsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUN0RSxNQUFNLDBCQUEwQixHQUFHLElBQUksMkRBQTJCLENBQ2hFLElBQUksRUFDSiw0QkFBNEIsQ0FDN0IsQ0FBQztRQUVGLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSx1Q0FBa0IsQ0FDL0MsSUFBSSxFQUNKLG9CQUFvQixDQUNyQixDQUFDO1FBRUYsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLHlDQUFtQixDQUNqRCxJQUFJLEVBQ0oscUJBQXFCLENBQ3RCLENBQUM7UUFFRixNQUFNLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFMUMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLHdCQUF3QixDQUFDLGlCQUFpQixDQUFDO1FBQ3ZFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUM7UUFDekQsSUFBSSxDQUFDLDBCQUEwQjtZQUM3QiwwQkFBMEIsQ0FBQywyQkFBMkIsQ0FBQztRQUN6RCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsa0JBQWtCLENBQUM7UUFDaEUsSUFBSSxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDO1FBQ25FLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM5QixDQUFDO0NBQ0Y7QUF4Q0Qsb0NBd0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3luY1R3ZWV0c1RvQWxnb2xpYSB9IGZyb20gJy4vQ29uc3RydWN0cy9TeW5jVHdlZXRzVG9BbGdvbGlhJztcbmltcG9ydCB7IFN5bmNVc2Vyc1RvQWxnb2xpYSB9IGZyb20gJy4vQ29uc3RydWN0cy9TeW5jVXNlcnNUb0FsZ29saWEnO1xuaW1wb3J0IHsgRGlzdHJpYnV0ZVR3ZWV0c1RvRm9sbG93ZXJzIH0gZnJvbSAnLi9Db25zdHJ1Y3RzL0Rpc3RyaWJ1dGUtVHdlZXQtVG8tRm9sbG93ZXJzJztcbmltcG9ydCB7IERpc3RyaWJ1dGVUd2VldCB9IGZyb20gJy4vQ29uc3RydWN0cy9EaXN0cmlidXRlLVR3ZWV0JztcbmltcG9ydCB7IENvbmZpcm1Vc2VyU2lnblVwIH0gZnJvbSAnLi9Db25zdHJ1Y3RzL2NvbmZpcm0tdXNlcic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBOb3RpZnkgfSBmcm9tICcuL0NvbnN0cnVjdHMvTm90aWZ5JztcblxuZXhwb3J0IGNsYXNzIENvbXB1dGVTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gIHB1YmxpYyByZWFkb25seSBwb3N0Q29uZmlybWF0aW9uSG9vazogY2RrLmF3c19sYW1iZGFfbm9kZWpzLk5vZGVqc0Z1bmN0aW9uO1xuICBwdWJsaWMgcmVhZG9ubHkgZGlzdHJpYnV0ZWRUd2VldDogY2RrLmF3c19sYW1iZGFfbm9kZWpzLk5vZGVqc0Z1bmN0aW9uO1xuICBwdWJsaWMgcmVhZG9ubHkgZGlzdHJpYnV0ZVR3ZWV0VG9Gb2xsb3dlcnM6IGNkay5hd3NfbGFtYmRhX25vZGVqcy5Ob2RlanNGdW5jdGlvbjtcbiAgcHVibGljIHJlYWRvbmx5IE5vdGlmeTogY2RrLmF3c19sYW1iZGFfbm9kZWpzLk5vZGVqc0Z1bmN0aW9uO1xuICBwdWJsaWMgcmVhZG9ubHkgc3luY1VzZXJzVG9BbGdvbGlhOiBjZGsuYXdzX2xhbWJkYV9ub2RlanMuTm9kZWpzRnVuY3Rpb247XG4gIHB1YmxpYyByZWFkb25seSBzeW5jVHdlZXRzVG9BbGdvbGlhOiBjZGsuYXdzX2xhbWJkYV9ub2RlanMuTm9kZWpzRnVuY3Rpb247XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBjZGsuU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuICAgIGNvbnN0IGNvbmZpcm1Vc2VyU2lnblVwVHJpZ2dlciA9IG5ldyBDb25maXJtVXNlclNpZ25VcChcbiAgICAgIHRoaXMsXG4gICAgICAnQ29uZmlybVVzZXJTaWduVXAnXG4gICAgKTtcbiAgICBjb25zdCBkaXN0cmlidXRlZFR3ZWV0ID0gbmV3IERpc3RyaWJ1dGVUd2VldCh0aGlzLCAnRGlzdHJpYnV0ZVR3ZWV0Jyk7XG4gICAgY29uc3QgZGlzdHJpYnV0ZVR3ZWV0VG9Gb2xsb3dlcnMgPSBuZXcgRGlzdHJpYnV0ZVR3ZWV0c1RvRm9sbG93ZXJzKFxuICAgICAgdGhpcyxcbiAgICAgICdEaXN0cmlidXRlVHdlZXRUb0ZvbGxvd2VycydcbiAgICApO1xuXG4gICAgY29uc3Qgc3luY1VzZXJzVG9BbGdvbGlhID0gbmV3IFN5bmNVc2Vyc1RvQWxnb2xpYShcbiAgICAgIHRoaXMsXG4gICAgICAnU3luY1VzZXJzVG9BbGdvbGlhJ1xuICAgICk7XG5cbiAgICBjb25zdCBzeW5jVHdlZXRzVG9BbGdvbGlhID0gbmV3IFN5bmNUd2VldHNUb0FsZ29saWEoXG4gICAgICB0aGlzLFxuICAgICAgJ1N5bmNUd2VldHNUb0FsZ29saWEnXG4gICAgKTtcblxuICAgIGNvbnN0IG5vdGlmeSA9IG5ldyBOb3RpZnkodGhpcywgJ05vdGlmeScpO1xuXG4gICAgdGhpcy5wb3N0Q29uZmlybWF0aW9uSG9vayA9IGNvbmZpcm1Vc2VyU2lnblVwVHJpZ2dlci5jb25maXJtVXNlclNpZ25VcDtcbiAgICB0aGlzLmRpc3RyaWJ1dGVkVHdlZXQgPSBkaXN0cmlidXRlZFR3ZWV0LkRpc3RyaWJ1dGVUd2VldDtcbiAgICB0aGlzLmRpc3RyaWJ1dGVUd2VldFRvRm9sbG93ZXJzID1cbiAgICAgIGRpc3RyaWJ1dGVUd2VldFRvRm9sbG93ZXJzLkRpc3RyaWJ1dGVUd2VldHNUb0ZvbGxvd2VycztcbiAgICB0aGlzLnN5bmNVc2Vyc1RvQWxnb2xpYSA9IHN5bmNVc2Vyc1RvQWxnb2xpYS5TeW5jVXNlcnNUb0FsZ29saWE7XG4gICAgdGhpcy5zeW5jVHdlZXRzVG9BbGdvbGlhID0gc3luY1R3ZWV0c1RvQWxnb2xpYS5TeW5jVHdlZXRzVG9BbGdvbGlhO1xuICAgIHRoaXMuTm90aWZ5ID0gbm90aWZ5Lk5vdGlmeTtcbiAgfVxufVxuIl19